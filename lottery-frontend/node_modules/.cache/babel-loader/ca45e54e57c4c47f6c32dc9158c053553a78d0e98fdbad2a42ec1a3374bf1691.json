{"ast":null,"code":"import { ethers } from 'ethers';\nimport contractABI from './contractABI';\nimport Web3Modal from 'web3modal';\nconst CONTRACT_ADDRESS = '0x747B5CdE93c8a6e0Ec1BE73574d7CC16DAb49Cb3';\nconst SOMNIA_TESTNET_ID = 50312;\nconst SOMNIA_RPC_URL = \"https://rpc.ankr.com/somnia_testnet/94240d61d7286b131b4ff6a4d6ffd4b9015373ea8ac8281651de7e351b4a4e54\";\nconst web3Modal = new Web3Modal({\n  cacheProvider: true // Cache the provider for faster reconnects\n});\nlet provider;\nlet signer;\nlet contract;\nexport const switchToSomnia = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"Metamask not found\");\n  }\n  try {\n    const currentChainId = await window.ethereum.request({\n      method: 'eth_chainId'\n    });\n    if (parseInt(currentChainId, 16) !== SOMNIA_TESTNET_ID) {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: ethers.toBeHex(SOMNIA_TESTNET_ID)\n        }]\n      });\n    }\n    return true;\n  } catch (error) {\n    if (error.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: ethers.toBeHex(SOMNIA_TESTNET_ID),\n            chainName: \"Somnia Testnet\",\n            nativeCurrency: {\n              name: \"Ether\",\n              symbol: \"STT\",\n              decimals: 18\n            },\n            rpcUrls: [SOMNIA_RPC_URL],\n            blockExplorerUrls: [\"https://shannon-explorer.somnia.network\"]\n          }]\n        });\n        return true;\n      } catch (addError) {\n        console.error(\"Failed to add Somnia Testnet:\", addError);\n        throw new Error(\"Failed to add Somnia Testnet network\");\n      }\n    } else {\n      console.error(\"Failed to switch network:\", error);\n      throw new Error(\"Failed to switch network\");\n    }\n  }\n};\nexport const connectWallet = async () => {\n  try {\n    provider = await web3Modal.connect();\n\n    // Try to switch to Somnia network\n    await switchToSomnia();\n\n    // Create new provider and signer\n    provider = new ethers.BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n    return signer.getAddress();\n  } catch (error) {\n    console.error('Error connecting wallet:', error);\n    throw error;\n  }\n};\nexport const disconnectWallet = async () => {\n  try {\n    if (provider && provider.disconnect) {\n      await provider.disconnect();\n    }\n    await web3Modal.clearCachedProvider();\n\n    // Reset variables\n    provider = null;\n    signer = null;\n    contract = null;\n\n    // Force page reload to reset state\n    window.location.reload();\n  } catch (error) {\n    console.error('Error disconnecting wallet:', error);\n    throw error;\n  }\n};\nexport const getContract = () => {\n  if (!contract) {\n    throw new Error('Contract not initialized. Call connectWallet() first.');\n  }\n  return contract;\n};","map":{"version":3,"names":["ethers","contractABI","Web3Modal","CONTRACT_ADDRESS","SOMNIA_TESTNET_ID","SOMNIA_RPC_URL","web3Modal","cacheProvider","provider","signer","contract","switchToSomnia","window","ethereum","Error","currentChainId","request","method","parseInt","params","chainId","toBeHex","error","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","console","connectWallet","connect","BrowserProvider","getSigner","Contract","getAddress","disconnectWallet","disconnect","clearCachedProvider","location","reload","getContract"],"sources":["C:/Users/MZ/Desktop/Lottery-dapp-main/lottery-frontend/src/utils/contract.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport contractABI from './contractABI'; \nimport Web3Modal from 'web3modal';\n\nconst CONTRACT_ADDRESS = '0x747B5CdE93c8a6e0Ec1BE73574d7CC16DAb49Cb3';\nconst SOMNIA_TESTNET_ID = 50312;\nconst SOMNIA_RPC_URL = \"https://rpc.ankr.com/somnia_testnet/94240d61d7286b131b4ff6a4d6ffd4b9015373ea8ac8281651de7e351b4a4e54\";\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true, // Cache the provider for faster reconnects\n});\n\nlet provider;\nlet signer;\nlet contract;\n\nexport const switchToSomnia = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"Metamask not found\");\n  }\n\n  try {\n    const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });\n    if (parseInt(currentChainId, 16) !== SOMNIA_TESTNET_ID) {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: ethers.toBeHex(SOMNIA_TESTNET_ID) }],\n      });\n    }\n    return true;\n  } catch (error) {\n    if (error.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: ethers.toBeHex(SOMNIA_TESTNET_ID),\n            chainName: \"Somnia Testnet\",\n            nativeCurrency: { name: \"Ether\", symbol: \"STT\", decimals: 18 },\n            rpcUrls: [SOMNIA_RPC_URL],\n            blockExplorerUrls: [\"https://shannon-explorer.somnia.network\"],\n          }]\n        });\n        return true;\n      } catch (addError) {\n        console.error(\"Failed to add Somnia Testnet:\", addError);\n        throw new Error(\"Failed to add Somnia Testnet network\");\n      }\n    } else {\n      console.error(\"Failed to switch network:\", error);\n      throw new Error(\"Failed to switch network\");\n    }\n  }\n};\n\nexport const connectWallet = async () => {\n  try {\n    provider = await web3Modal.connect();\n    \n    // Try to switch to Somnia network\n    await switchToSomnia();\n    \n    // Create new provider and signer\n    provider = new ethers.BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n    \n    return signer.getAddress();\n  } catch (error) {\n    console.error('Error connecting wallet:', error);\n    throw error;\n  }\n};\n\nexport const disconnectWallet = async () => {\n  try {\n    if (provider && provider.disconnect) {\n      await provider.disconnect();\n    }\n    await web3Modal.clearCachedProvider();\n    \n    // Reset variables\n    provider = null;\n    signer = null;\n    contract = null;\n    \n    // Force page reload to reset state\n    window.location.reload();\n  } catch (error) {\n    console.error('Error disconnecting wallet:', error);\n    throw error;\n  }\n};\n\nexport const getContract = () => {\n  if (!contract) {\n    throw new Error('Contract not initialized. Call connectWallet() first.');\n  }\n  return contract;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}