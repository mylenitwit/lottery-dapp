{"ast":null,"code":"import { ethers } from 'ethers';\nimport contractABI from './contractABI';\nimport Web3Modal from 'web3modal';\nconst CONTRACT_ADDRESS = '0x747B5CdE93c8a6e0Ec1BE73574d7CC16DAb49Cb3';\nconst SOMNIA_TESTNET_ID = 50312;\nconst SOMNIA_RPC_URL = \"https://rpc.ankr.com/somnia_testnet/94240d61d7286b131b4ff6a4d6ffd4b9015373ea8ac8281651de7e351b4a4e54\";\nconst web3Modal = new Web3Modal({\n  cacheProvider: true // Cache the provider for faster reconnects\n});\nlet provider;\nlet signer;\nlet contract;\nexport const switchToSomnia = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"Metamask not found\");\n  }\n  const currentChainId = await window.ethereum.request({\n    method: 'eth_chainId'\n  });\n  if (parseInt(currentChainId, 16) !== SOMNIA_TESTNET_ID) {\n    try {\n      // First try to switch chains\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: ethers.toBeHex(SOMNIA_TESTNET_ID)\n        }]\n      });\n      return true;\n    } catch (error) {\n      if (error.code === 4902) {\n        try {\n          // If chain is not defined, try to add it\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: ethers.toBeHex(SOMNIA_TESTNET_ID),\n              chainName: \"Somnia Testnet\",\n              nativeCurrency: {\n                name: \"Ether\",\n                symbol: \"STT\",\n                decimals: 18\n              },\n              rpcUrls: [SOMNIA_RPC_URL],\n              blockExplorerUrls: [\"https://shannon-explorer.somnia.network\"]\n            }]\n          });\n\n          // Try switching again after the chain is added\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: ethers.toBeHex(SOMNIA_TESTNET_ID)\n            }]\n          });\n          return true;\n        } catch (addError) {\n          console.error(\"Failed to add Somnia Testnet:\", addError);\n          throw new Error(\"Failed to add Somnia Testnet network. You cannot use this application without switching to this network.\");\n        }\n      } else if (error.code === 4001) {\n        // User rejected the switch\n        throw new Error(\"Somnia Testnet network switch was rejected. You must switch to Somnia network to use this application.\");\n      } else {\n        console.error(\"Failed to switch network:\", error);\n        throw new Error(\"Failed to switch to Somnia network. Please switch manually to Somnia Testnet from MetaMask.\");\n      }\n    }\n  }\n  return true;\n};\nexport const connectWallet = async () => {\n  try {\n    provider = await web3Modal.connect();\n\n    // Force switch to Somnia network\n    await switchToSomnia();\n\n    // Create provider and signer if network switch was successful\n    provider = new ethers.BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n\n    // Check the network again after connection, throw error if still not on Somnia\n    const chainId = await provider.getNetwork().then(network => network.chainId);\n    if (Number(chainId) !== SOMNIA_TESTNET_ID) {\n      throw new Error(\"Automatic switch to Somnia Testnet failed. Please switch manually.\");\n    }\n    return signer.getAddress();\n  } catch (error) {\n    console.error('Error connecting wallet:', error);\n\n    // Clear connection if there's an error with Somnia switch or rejection\n    if (error.message && (error.message.includes(\"Somnia\") || error.code === 4001)) {\n      if (provider && provider.disconnect) {\n        try {\n          await provider.disconnect();\n        } catch (e) {\n          console.log(\"Provider disconnect failed\", e);\n        }\n      }\n      await web3Modal.clearCachedProvider();\n    }\n    throw error;\n  }\n};\nexport const disconnectWallet = async () => {\n  try {\n    if (provider && provider.disconnect) {\n      await provider.disconnect();\n    }\n    await web3Modal.clearCachedProvider();\n\n    // Reset variables\n    provider = null;\n    signer = null;\n    contract = null;\n\n    // Force page reload to reset state\n    window.location.reload();\n  } catch (error) {\n    console.error('Error disconnecting wallet:', error);\n    throw error;\n  }\n};\nexport const getContract = () => {\n  if (!contract) {\n    throw new Error('Contract not initialized. Call connectWallet() first.');\n  }\n  return contract;\n};","map":{"version":3,"names":["ethers","contractABI","Web3Modal","CONTRACT_ADDRESS","SOMNIA_TESTNET_ID","SOMNIA_RPC_URL","web3Modal","cacheProvider","provider","signer","contract","switchToSomnia","window","ethereum","Error","currentChainId","request","method","parseInt","params","chainId","toBeHex","error","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","console","connectWallet","connect","BrowserProvider","getSigner","Contract","getNetwork","then","network","Number","getAddress","message","includes","disconnect","e","log","clearCachedProvider","disconnectWallet","location","reload","getContract"],"sources":["C:/Users/MZ/Desktop/Lottery-dapp-main/lottery-frontend/src/utils/contract.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport contractABI from './contractABI'; \nimport Web3Modal from 'web3modal';\n\nconst CONTRACT_ADDRESS = '0x747B5CdE93c8a6e0Ec1BE73574d7CC16DAb49Cb3';\nconst SOMNIA_TESTNET_ID = 50312;\nconst SOMNIA_RPC_URL = \"https://rpc.ankr.com/somnia_testnet/94240d61d7286b131b4ff6a4d6ffd4b9015373ea8ac8281651de7e351b4a4e54\";\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true, // Cache the provider for faster reconnects\n});\n\nlet provider;\nlet signer;\nlet contract;\n\nexport const switchToSomnia = async () => {\n  if (!window.ethereum) {\n    throw new Error(\"Metamask not found\");\n  }\n\n  const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });\n  if (parseInt(currentChainId, 16) !== SOMNIA_TESTNET_ID) {\n    try {\n      // First try to switch chains\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: ethers.toBeHex(SOMNIA_TESTNET_ID) }],\n      });\n      \n      return true;\n    } catch (error) {\n      if (error.code === 4902) {\n        try {\n          // If chain is not defined, try to add it\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: ethers.toBeHex(SOMNIA_TESTNET_ID),\n              chainName: \"Somnia Testnet\",\n              nativeCurrency: { name: \"Ether\", symbol: \"STT\", decimals: 18 },\n              rpcUrls: [SOMNIA_RPC_URL],\n              blockExplorerUrls: [\"https://shannon-explorer.somnia.network\"],\n            }]\n          });\n          \n          // Try switching again after the chain is added\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: ethers.toBeHex(SOMNIA_TESTNET_ID) }],\n          });\n          \n          return true;\n        } catch (addError) {\n          console.error(\"Failed to add Somnia Testnet:\", addError);\n          throw new Error(\"Failed to add Somnia Testnet network. You cannot use this application without switching to this network.\");\n        }\n      } else if (error.code === 4001) {\n        // User rejected the switch\n        throw new Error(\"Somnia Testnet network switch was rejected. You must switch to Somnia network to use this application.\");\n      } else {\n        console.error(\"Failed to switch network:\", error);\n        throw new Error(\"Failed to switch to Somnia network. Please switch manually to Somnia Testnet from MetaMask.\");\n      }\n    }\n  }\n  \n  return true;\n};\n\nexport const connectWallet = async () => {\n  try {\n    provider = await web3Modal.connect();\n    \n    // Force switch to Somnia network\n    await switchToSomnia();\n    \n    // Create provider and signer if network switch was successful\n    provider = new ethers.BrowserProvider(window.ethereum);\n    signer = await provider.getSigner();\n    contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, signer);\n    \n    // Check the network again after connection, throw error if still not on Somnia\n    const chainId = await provider.getNetwork().then(network => network.chainId);\n    if (Number(chainId) !== SOMNIA_TESTNET_ID) {\n      throw new Error(\"Automatic switch to Somnia Testnet failed. Please switch manually.\");\n    }\n    \n    return signer.getAddress();\n  } catch (error) {\n    console.error('Error connecting wallet:', error);\n    \n    // Clear connection if there's an error with Somnia switch or rejection\n    if (error.message && (error.message.includes(\"Somnia\") || error.code === 4001)) {\n      if (provider && provider.disconnect) {\n        try {\n          await provider.disconnect();\n        } catch (e) {\n          console.log(\"Provider disconnect failed\", e);\n        }\n      }\n      await web3Modal.clearCachedProvider();\n    }\n    \n    throw error;\n  }\n};\n\nexport const disconnectWallet = async () => {\n  try {\n    if (provider && provider.disconnect) {\n      await provider.disconnect();\n    }\n    await web3Modal.clearCachedProvider();\n    \n    // Reset variables\n    provider = null;\n    signer = null;\n    contract = null;\n    \n    // Force page reload to reset state\n    window.location.reload();\n  } catch (error) {\n    console.error('Error disconnecting wallet:', error);\n    throw error;\n  }\n};\n\nexport const getContract = () => {\n  if (!contract) {\n    throw new Error('Contract not initialized. Call connectWallet() first.');\n  }\n  return contract;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}